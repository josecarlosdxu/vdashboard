/*

Proportions utility
========

Responsive proportions avaiable at every breakpoint.

We're using a 5% increment system without columns to keep the design free of constrains.This is important when designing interfaces as the column system fails at the micro level
when designing interfaces.

*/
$steps: 20;
//Thirds, Sixths, Sevenths, full
$customWidths: (3rd: 3,
6th: 6,
7th: 7,
8th: 8);

//generates all available widths using the given steps and breakpoints
@mixin createWidths() {
    @each $bkName, $bkSize in $breakpoints {

        //For every breakpoint defined in variables
        @include addMedia($bkName, $bkSize) {

            // By Step
            @for $key from 1 to $steps {
                //Create the className interpolating breakpoint name for every step.
                $tmpSize: $bkName + "-"+ floor($key / $steps*100);

                @include utility(#{$tmpSize}) {
                    max-width: percentage($key / $steps);
                }
            }

            // By custom widths
            @each $width, $size in $customWidths {
                //Create the className interpolating breakpoint name for customWidth
                $tmpSize: $bkName + "-"+ $width;

                @include utility(#{$tmpSize}) {
                    max-width: calc(100% / #{$size});
                }
            }
        }
    }
}

@include createWidths();

@each $size, $value in $sizes {
    .m-#{$size} {
        margin: $value;
    }

    .mt-#{$size} {
        margin-top: $value;
    }

    .mb-#{$size} {
        margin-bottom: $value;
    }

    .ml-#{$size} {
        margin-left: $value;
    }

    .mr-#{$size} {
        margin-right: $value;
    }

    .mx-#{$size} {
        margin-right: $value;
        margin-left: $value;
    }

    .my-#{$size} {
        margin-top: $value;
        margin-bottom: $value;
    }

    .p-#{$size} {
        padding: $value;
    }

    .pt-#{$size} {
        padding-top: $value;
    }

    .pb-#{$size} {
        padding-bottom: $value;
    }

    .pl-#{$size} {
        padding-left: $value;
    }

    .pr-#{$size} {
        padding-right: $value;
    }

    .px-#{$size} {
        padding-right: $value;
        padding-left: $value;
    }

    .py-#{$size} {
        padding-top: $value;
        padding-bottom: $value;
    }
}